import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime
import os
import openpyxl
import qrcode
from io import BytesIO
from PIL import Image

# Configuration de la page
st.set_page_config(page_title="GMAO - Gestion de Stock", layout="wide")

# Titre de l'application
st.title("üì¶ Syst√®me de Gestion de Stock")

# Donn√©es initiales
INITIAL_DATA = {
    'Produits': ['Tournevis cruciforme', 'Marteau 500g', 'Perceuse sans fil', 'Vis 6x50mm', 'Cl√© √† molette'],
    'Reference': ['TS001', 'MH001', 'PS001', 'V001', 'CM001'],
    'Quantite': [50, 30, 15, 1000, 25],
    'Stock_Min': [10, 5, 2, 100, 5],
    'Stock_Max': [100, 50, 20, 2000, 50],
    'Emplacement': ['Atelier A', 'Atelier B', 'Atelier A', 'Stockage', 'Atelier B'],
    'Fournisseur': ['Fournisseur A', 'Fournisseur B', 'Fournisseur C', 'Fournisseur A', 'Fournisseur B'],
    'Date_Entree': ['2024-03-15', '2024-03-14', '2024-03-13', '2024-03-12', '2024-03-11'],
    'Prix_Unitaire': [15.99, 25.50, 89.99, 0.15, 12.75]
}

# Chargement des donn√©es
def load_data():
    # Cr√©er le dossier data s'il n'existe pas
    os.makedirs("data", exist_ok=True)
    
    file_path = "data/inventaire.xlsx"
    
    # Si le fichier n'existe pas, cr√©er un nouveau fichier avec les donn√©es initiales
    if not os.path.exists(file_path):
        df = pd.DataFrame(INITIAL_DATA)
        df.to_excel(file_path, index=False, engine='openpyxl')
        return df
    
    try:
        df = pd.read_excel(file_path, engine='openpyxl')
        
        # Migration : ajouter les colonnes Stock_Min et Stock_Max si elles n'existent pas
        if 'Stock_Min' not in df.columns:
            df['Stock_Min'] = 10  # Valeur par d√©faut
        if 'Stock_Max' not in df.columns:
            df['Stock_Max'] = 100  # Valeur par d√©faut
            
        # Sauvegarder le fichier mis √† jour
        df.to_excel(file_path, index=False, engine='openpyxl')
        return df
        
    except Exception as e:
        st.error(f"Erreur lors de la lecture du fichier Excel: {str(e)}")
        # En cas d'erreur, cr√©er un nouveau fichier avec les donn√©es initiales
        df = pd.DataFrame(INITIAL_DATA)
        df.to_excel(file_path, index=False, engine='openpyxl')
        return df

# Fonction pour sauvegarder les donn√©es
def save_data(df):
    try:
        df.to_excel("data/inventaire.xlsx", index=False, engine='openpyxl')
    except Exception as e:
        st.error(f"Erreur lors de la sauvegarde du fichier Excel: {str(e)}")

def log_mouvement(produit, nature, quantite_mouvement, quantite_apres, quantite_avant):
    os.makedirs("data", exist_ok=True)
    file_path = "data/historique.xlsx"
    new_row = {
        'Date': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        'Produit': produit,
        'Nature': nature,
        'Quantite_Mouvement': quantite_mouvement,
        'Quantite_Avant': quantite_avant,
        'Quantite_Apres': quantite_apres
    }
    if os.path.exists(file_path):
        df_hist = pd.read_excel(file_path, engine='openpyxl')
        df_hist = pd.concat([df_hist, pd.DataFrame([new_row])], ignore_index=True)
    else:
        df_hist = pd.DataFrame([new_row])
    df_hist.to_excel(file_path, index=False, engine='openpyxl')

def sauvegarder_demande(demandeur, produits_demandes, motif):
    """Sauvegarde une nouvelle demande de mat√©riel"""
    os.makedirs("data", exist_ok=True)
    file_path = "data/demandes.xlsx"
    
    # Cr√©er un ID unique pour la demande
    demande_id = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    new_row = {
        'ID_Demande': demande_id,
        'Date_Demande': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        'Demandeur': demandeur,
        'Produits_Demandes': str(produits_demandes),  # Convertir le dict en string
        'Motif': motif,
        'Statut': 'En attente',
        'Date_Traitement': '',
        'Traite_Par': '',
        'Commentaires': ''
    }
    
    if os.path.exists(file_path):
        df_demandes = pd.read_excel(file_path, engine='openpyxl')
        df_demandes = pd.concat([df_demandes, pd.DataFrame([new_row])], ignore_index=True)
    else:
        df_demandes = pd.DataFrame([new_row])
    
    df_demandes.to_excel(file_path, index=False, engine='openpyxl')
    return demande_id

def charger_demandes():
    """Charge toutes les demandes depuis le fichier Excel"""
    file_path = "data/demandes.xlsx"
    if os.path.exists(file_path):
        try:
            return pd.read_excel(file_path, engine='openpyxl')
        except Exception as e:
            st.error(f"Erreur lors du chargement des demandes: {str(e)}")
            return pd.DataFrame()
    else:
        return pd.DataFrame()

def mettre_a_jour_demande(demande_id, nouveau_statut, traite_par, commentaires=""):
    """Met √† jour le statut d'une demande"""
    file_path = "data/demandes.xlsx"
    if os.path.exists(file_path):
        df_demandes = pd.read_excel(file_path, engine='openpyxl')
        mask = df_demandes['ID_Demande'] == demande_id
        df_demandes.loc[mask, 'Statut'] = nouveau_statut
        df_demandes.loc[mask, 'Date_Traitement'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        df_demandes.loc[mask, 'Traite_Par'] = traite_par
        df_demandes.loc[mask, 'Commentaires'] = commentaires
        df_demandes.to_excel(file_path, index=False, engine='openpyxl')
        return True
    return False

# Fonction r√©utilisable pour la recherche de produits
def rechercher_produit(df, mode="selection"):
    """
    Fonction r√©utilisable pour rechercher un produit
    Args:
        df: DataFrame contenant les produits
        mode: "selection" pour retourner le produit s√©lectionn√©, "affichage" pour afficher les r√©sultats
    Returns:
        produit trouv√© (Series) ou None si aucun produit trouv√©
    """
    search_type = st.radio("Type de recherche", ["Par r√©f√©rence", "Par nom", "Scanner externe"])
    
    produit_trouve = None
    
    if search_type == "Scanner externe":
        st.info("üîç **Scanner externe connect√©**")
        st.write("üí° Utilisez votre scanner USB/Bluetooth pour scanner le code-barres ou QR code")
        st.write("üìã Types de scanners recommand√©s :")
        st.write("- üî≤ **Scanner 2D** (pour QR codes et codes-barres)")
        st.write("- üîç **Douchette 2D USB** (branchement plug-and-play)")
        st.write("- üì± **Scanner Bluetooth** (connexion sans fil)")
        
        # Champ d'input qui recevra automatiquement les donn√©es du scanner
        code_scanne = st.text_input(
            "üìÑ Code scann√©", 
            placeholder="Positionnez le curseur ici et scannez votre code...",
            help="Le scanner USB tapera automatiquement le code dans ce champ",
            key="scanner_input"
        )
        
        if code_scanne:
            # Nettoyer le code (supprimer les espaces, retours √† la ligne, etc.)
            code_scanne = code_scanne.strip()
            
            if len(code_scanne) > 0:
                # Rechercher d'abord par r√©f√©rence exacte
                result = df[df['Reference'] == code_scanne]
                
                if not result.empty:
                    produit_trouve = result.iloc[0]
                    if mode == "affichage":
                        st.success(f"‚úÖ Produit trouv√© par r√©f√©rence : **{produit_trouve['Produits']}**")
                        st.dataframe(result)
                    else:
                        st.success(f"‚úÖ Produit trouv√© : **{produit_trouve['Produits']}**")
                else:
                    # Si pas trouv√© par r√©f√©rence, essayer par code-barres (si diff√©rent)
                    # ou recherche dans le nom du produit
                    result_nom = df[df['Produits'].str.contains(code_scanne, case=False, na=False)]
                    
                    if not result_nom.empty:
                        if mode == "affichage":
                            st.info(f"üîç Produit(s) trouv√©(s) par nom contenant '{code_scanne}':")
                            st.dataframe(result_nom)
                        elif len(result_nom) == 1:
                            produit_trouve = result_nom.iloc[0]
                            st.success(f"‚úÖ Produit trouv√© par nom : **{produit_trouve['Produits']}**")
                        else:
                            st.info(f"üîç {len(result_nom)} produits trouv√©s par nom:")
                            st.dataframe(result_nom[['Produits', 'Reference', 'Quantite']])
                            reference_choisie = st.selectbox("Choisissez la r√©f√©rence:", result_nom['Reference'].tolist())
                            if reference_choisie:
                                produit_trouve = result_nom[result_nom['Reference'] == reference_choisie].iloc[0]
                    else:
                        st.warning(f"‚ùå Aucun produit trouv√© avec le code : '{code_scanne}'")
                        st.info("üí° V√©rifiez que :")
                        st.write("- Le produit existe dans votre inventaire")
                        st.write("- La r√©f√©rence est correcte")
                        st.write("- Le scanner fonctionne correctement")
    
    elif search_type == "Par r√©f√©rence":
        reference = st.text_input("Entrez la r√©f√©rence du produit")
        if reference:
            result = df[df['Reference'] == reference]
            if not result.empty:
                produit_trouve = result.iloc[0]
                if mode == "affichage":
                    st.dataframe(result)
                # else:
                #     st.success(f"Produit trouv√© : {produit_trouve['Produits']}")
            else:
                st.warning("Aucun produit trouv√© avec cette r√©f√©rence.")
    
    else:  # Par nom
        nom = st.text_input("Entrez le nom du produit")
        if nom:
            result = df[df['Produits'].str.contains(nom, case=False)]
            if not result.empty:
                if mode == "affichage":
                    st.dataframe(result)
                    return None  # Pour la recherche d'affichage, on ne retourne pas de produit sp√©cifique
                elif len(result) == 1:
                    produit_trouve = result.iloc[0]
                    # st.success(f"Produit trouv√© : {produit_trouve['Produits']}")
                else:
                    st.info(f"{len(result)} produits trouv√©s:")
                    st.dataframe(result[['Produits', 'Reference', 'Quantite']])
                    reference_choisie = st.selectbox("Choisissez la r√©f√©rence:", result['Reference'].tolist())
                    if reference_choisie:
                        produit_trouve = result[result['Reference'] == reference_choisie].iloc[0]
            else:
                st.warning("Aucun produit trouv√© avec ce nom.")
    
    return produit_trouve

# Fonction pour v√©rifier les alertes de stock
def afficher_alertes_stock(df):
    """Affiche les alertes de stock pour les produits en dessous du minimum"""
    if df.empty:
        return
    
    # Produits en dessous du stock minimum
    alertes_min = df[df['Quantite'] < df['Stock_Min']]
    
    # Produits au-dessus du stock maximum
    alertes_max = df[df['Quantite'] > df['Stock_Max']]
    
    if not alertes_min.empty or not alertes_max.empty:
        st.sidebar.markdown("---")
        st.sidebar.markdown("### ‚ö†Ô∏è Alertes de Stock")
        
        if not alertes_min.empty:
            st.sidebar.markdown("**üî¥ Stock insuffisant :**")
            for _, produit in alertes_min.iterrows():
                st.sidebar.error(f"**{produit['Produits']}** : {produit['Quantite']} < {produit['Stock_Min']}")
        
        if not alertes_max.empty:
            st.sidebar.markdown("**üü° Surstock :**")
            for _, produit in alertes_max.iterrows():
                st.sidebar.warning(f"**{produit['Produits']}** : {produit['Quantite']} > {produit['Stock_Max']}")

# Chargement initial des donn√©es
df = load_data()

# Affichage des alertes de stock dans la sidebar
afficher_alertes_stock(df)

# Section d'aide pour les scanners
st.sidebar.markdown("---")
with st.sidebar.expander("üîç Guide Scanners", expanded=False):
    st.markdown("### Scanners recommand√©s")
    st.write("**üì± Pour QR codes + codes-barres :**")
    st.write("- Scanner 2D USB (HID)")
    st.write("- Douchette 2D Bluetooth")
    st.write("- Scanner portable 2D")
    
    st.write("**‚ö†Ô∏è Non compatible :**")
    st.write("- Scanner laser classique")
    st.write("- Scanner 1D uniquement")
    
    st.markdown("### Installation")
    st.write("1. üîå Branchez le scanner USB")
    st.write("2. üì± Ou appairez en Bluetooth") 
    st.write("3. ‚úÖ Pr√™t √† l'emploi !")
    
    st.markdown("### Utilisation")
    st.write("1. üìç Cliquez dans le champ")
    st.write("2. üîç Scannez le code")
    st.write("3. ‚ö° Le code appara√Æt automatiquement")

# Sidebar pour les actions
st.sidebar.title("Actions")
action = st.sidebar.selectbox(
    "Choisir une action",
    [
        "Magasin",
        "Demande de mat√©riel",
        "Gestion des demandes",
        "Ajouter un produit",
        "Modifier un produit",
        "Rechercher un produit",
        "Entr√©e de stock",
        "Sortie de stock",
        "Inventaire",
        "Alertes de stock",
        "Historique des mouvements",
        "QR Code produit"
    ]
)

def get_statut_icon(statut):
    """Retourne l'ic√¥ne appropri√©e selon le statut de la demande"""
    if statut == 'En attente':
        return '‚è≥'
    elif statut == 'Approuv√©e':
        return '‚úÖ'
    elif statut == 'Refus√©e':
        return '‚ùå'
    else:
        return 'üìã'  # Ic√¥ne par d√©faut

if action == "Magasin":
    st.header("Stock actuel")
    if not df.empty:
        # Ajouter une colonne de statut de stock avec la m√™me logique que les alertes
        df_display = df.copy()
        
        # Calcul du seuil d'alerte (m√™me logique que dans les alertes)
        seuil_alerte = df['Stock_Min'] + (df['Stock_Max'] - df['Stock_Min']) * 0.3
        
        # Calcul de la valeur du stock
        df_display['Valeur_Stock'] = df_display['Quantite'] * df_display['Prix_Unitaire']
        
        df_display['Statut_Stock'] = df_display.apply(
            lambda row: "üî¥ Critique" if row['Quantite'] < row['Stock_Min'] 
            else "üü° Surstock" if row['Quantite'] > row['Stock_Max']
            else "üü† Bient√¥t rupture" if row['Quantite'] <= seuil_alerte.loc[row.name]
            else "üü¢ Normal", axis=1
        )
        
        # Statistiques rapides
        col1, col2, col3, col4, col5 = st.columns(5)
        with col1:
            alertes_min = len(df[df['Quantite'] < df['Stock_Min']])
            st.metric("Produits en stock critique", alertes_min)
        with col2:
            alertes_bientot = len(df[(df['Quantite'] >= df['Stock_Min']) & (df['Quantite'] <= seuil_alerte)])
            st.metric("Bient√¥t en rupture", alertes_bientot)
        with col3:
            alertes_max = len(df[df['Quantite'] > df['Stock_Max']])
            st.metric("Produits en surstock", alertes_max)
        with col4:
            stock_normal = len(df[(df['Quantite'] >= df['Stock_Min']) & (df['Quantite'] <= df['Stock_Max']) & (df['Quantite'] > seuil_alerte)])
            st.metric("Produits en stock normal", stock_normal)
        with col5:
            valeur_totale = df_display['Valeur_Stock'].sum()
            st.metric("üí∞ Valeur totale du stock", f"{valeur_totale:,.2f} ‚Ç¨")
            
        # R√©organiser les colonnes pour l'affichage
        colonnes_affichage = ['Produits', 'Reference', 'Quantite', 'Stock_Min', 'Stock_Max', 'Prix_Unitaire', 'Valeur_Stock', 'Statut_Stock', 'Emplacement', 'Fournisseur', 'Date_Entree']
        st.dataframe(df_display[colonnes_affichage].round(2))

        # Graphique de la r√©partition des stocks
        fig = px.bar(df, x='Produits', y='Quantite', title='R√©partition des stocks par produit')
        st.plotly_chart(fig)

    else:
        st.warning("Aucune donn√©e disponible dans l'inventaire.")

elif action == "Demande de mat√©riel":
    st.header("üìã Demande de Mat√©riel")
    st.info("üí° Remplissez ce formulaire pour demander du mat√©riel au magasinier")
    
    if not df.empty:
        # Informations du demandeur
        with st.expander("üë§ Informations du demandeur", expanded=True):
            col1, col2 = st.columns(2)
            with col1:
                demandeur = st.text_input("Nom du demandeur *", placeholder="Pr√©nom NOM")
            with col2:
                chantier = st.selectbox("Chantier/Atelier *", ["Atelier A", "Atelier B", "Chantier 1", "Chantier 2", "Maintenance"])
        
        # S√©lection des produits
        st.subheader("üõ†Ô∏è S√©lection des produits")
        
        # Afficher les produits disponibles en stock
        df_disponible = df[df['Quantite'] > 0].copy()
        
        if df_disponible.empty:
            st.warning("Aucun produit en stock actuellement.")
        else:
            # Initialiser le panier dans la session
            if 'panier_demande' not in st.session_state:
                st.session_state.panier_demande = {}
            
            # Section de recherche rapide
            with st.expander("üîç Recherche rapide de produits", expanded=False):
                st.info("üí° Recherchez un produit sp√©cifique pour l'ajouter rapidement √† votre demande")
                
                produit_trouve = rechercher_produit(df_disponible, mode="selection")
                
                if produit_trouve is not None:
                    # Affichage du produit trouv√© avec option d'ajout
                    # st.success(f"**Produit trouv√© :** {produit_trouve['Produits']}")
                    
                    # Informations du produit
                    col_info, col_action = st.columns([2, 1])
                    
                    with col_info:
                        # Statut de stock avec couleur
                        if produit_trouve['Quantite'] < produit_trouve['Stock_Min']:
                            statut = "üî¥ Stock critique"
                        elif produit_trouve['Quantite'] <= produit_trouve['Stock_Min'] + (produit_trouve['Stock_Max'] - produit_trouve['Stock_Min']) * 0.3:
                            statut = "üü† Stock faible"
                        else:
                            statut = "üü¢ Disponible"
                        
                        st.write(f"**{produit_trouve['Produits']}**")
                        st.write(f"**R√©f√©rence :** {produit_trouve['Reference']}")
                        st.write(f"**Stock :** {produit_trouve['Quantite']} - {statut}")
                        st.write(f"**Emplacement :** {produit_trouve['Emplacement']}")
                    
                    with col_action:
                        # Formulaire d'ajout au panier
                        with st.container():
                            quantite_recherche = st.number_input(
                                "Quantit√©", 
                                min_value=1, 
                                max_value=int(produit_trouve['Quantite']), 
                                value=1,
                                step=1,
                                key=f"qty_search_{produit_trouve['Reference']}"
                            )
                            
                            if st.button("‚ûï Ajouter au panier", key=f"add_search_{produit_trouve['Reference']}", use_container_width=True):
                                st.session_state.panier_demande[produit_trouve['Reference']] = {
                                    'produit': produit_trouve['Produits'],
                                    'quantite': quantite_recherche,
                                    'emplacement': produit_trouve['Emplacement']
                                }
                                st.success(f"‚úÖ {quantite_recherche} x {produit_trouve['Produits']} ajout√©(s) au panier")
                                st.experimental_rerun()
            
            st.divider()
            
            # Affichage du panier
            st.subheader("üõí Votre panier")
            if st.session_state.panier_demande:
                total_articles = 0
                for ref, item in st.session_state.panier_demande.items():
                    col_item, col_qty, col_remove = st.columns([3, 1, 1])
                    
                    with col_item:
                        st.write(f"**{item['produit']}**")
                        st.write(f"R√©f: {ref} - Emplacement: {item['emplacement']}")
                    
                    with col_qty:
                        st.write(f"**Quantit√©: {item['quantite']}**")
                    
                    with col_remove:
                        if st.button(f"‚ùå Retirer", key=f"remove_{ref}", use_container_width=True):
                            del st.session_state.panier_demande[ref]
                            st.experimental_rerun()
                    
                    st.divider()
                    total_articles += item['quantite']
                
                col1, col2 = st.columns(2)
                with col1:
                    st.metric("Total articles", total_articles)
                with col2:
                    if st.button("üóëÔ∏è Vider le panier", use_container_width=True):
                        st.session_state.panier_demande = {}
                        st.experimental_rerun()
            else:
                st.info("Votre panier est vide. Utilisez la recherche ci-dessus pour ajouter des produits.")
        
        # Finalisation de la demande
        if st.session_state.panier_demande:
            st.subheader("üìù Finalisation de la demande")
            
            col1, col2 = st.columns(2)
            with col1:
                urgence = st.selectbox("Niveau d'urgence", ["Normal", "Urgent", "Tr√®s urgent"])
            with col2:
                date_souhaitee = st.date_input("Date souhait√©e", datetime.now().date())
            
            motif = st.text_area(
                "Motif de la demande *", 
                placeholder="D√©crivez l'utilisation pr√©vue du mat√©riel...",
                help="Expliquez pourquoi vous avez besoin de ce mat√©riel"
            )
            
            # V√©rifications avant soumission
            if st.button("üì§ Soumettre la demande", type="primary"):
                if not demandeur:
                    st.error("‚ùå Veuillez saisir votre nom")
                elif not motif:
                    st.error("‚ùå Veuillez indiquer le motif de votre demande")
                else:
                    # Pr√©parer les donn√©es de la demande
                    demande_data = {
                        'chantier': chantier,
                        'urgence': urgence,
                        'date_souhaitee': date_souhaitee.strftime("%Y-%m-%d"),
                        'produits': st.session_state.panier_demande
                    }
                    
                    # Sauvegarder la demande
                    demande_id = sauvegarder_demande(demandeur, demande_data, motif)
                    
                    # Confirmation
                    st.success(f"‚úÖ Demande soumise avec succ√®s !")
                    st.info(f"**Num√©ro de demande :** {demande_id}")
                    st.info("Le magasinier traitera votre demande dans les plus brefs d√©lais.")
                    
                    # Vider le panier
                    st.session_state.panier_demande = {}
                    
                    # Afficher un r√©capitulatif
                    with st.expander("üìÑ R√©capitulatif de votre demande"):
                        st.write(f"**Demandeur :** {demandeur}")
                        st.write(f"**Chantier :** {chantier}")
                        st.write(f"**Urgence :** {urgence}")
                        st.write(f"**Date souhait√©e :** {date_souhaitee}")
                        st.write(f"**Motif :** {motif}")
                        st.write("**Produits demand√©s :**")
                        for ref, item in demande_data['produits'].items():
                            st.write(f"- {item['quantite']} x {item['produit']}")
    else:
        st.warning("Aucun produit disponible dans l'inventaire.")

elif action == "Gestion des demandes":
    st.header("üìã Gestion des Demandes de Mat√©riel")
    st.info("üë• Interface magasinier pour traiter les demandes")
    
    # Charger les demandes
    df_demandes = charger_demandes()
    
    if not df_demandes.empty:
        # Statistiques rapides
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            en_attente = len(df_demandes[df_demandes['Statut'] == 'En attente'])
            st.metric("üïê En attente", en_attente)
        with col2:
            approuvees = len(df_demandes[df_demandes['Statut'] == 'Approuv√©e'])
            st.metric("‚úÖ Approuv√©es", approuvees)
        with col3:
            refusees = len(df_demandes[df_demandes['Statut'] == 'Refus√©e'])
            st.metric("‚ùå Refus√©es", refusees)
        with col4:
            totales = len(df_demandes)
            st.metric("üìä Total", totales)
        
        # Filtres
        col1, col2 = st.columns(2)
        with col1:
            statuts = ["Tous"] + sorted(df_demandes['Statut'].unique().tolist())
            filtre_statut = st.selectbox("Filtrer par statut", statuts)
        with col2:
            demandeurs = ["Tous"] + sorted(df_demandes['Demandeur'].unique().tolist())
            filtre_demandeur = st.selectbox("Filtrer par demandeur", demandeurs)
        
        # Application des filtres
        df_filtre = df_demandes.copy()
        if filtre_statut != "Tous":
            df_filtre = df_filtre[df_filtre['Statut'] == filtre_statut]
        if filtre_demandeur != "Tous":
            df_filtre = df_filtre[df_filtre['Demandeur'] == filtre_demandeur]
        
        # Tri par date de demande (plus r√©cent en premier)
        df_filtre = df_filtre.sort_values('Date_Demande', ascending=False)
        
        # Affichage des demandes
        for idx, demande in df_filtre.iterrows():
            statut_icon = get_statut_icon(demande['Statut'])
            with st.expander(f"{statut_icon} Demande {demande['ID_Demande']} - {demande['Demandeur']} - {demande['Statut']}"):
                col1, col2 = st.columns(2)
                
                with col1:
                    st.write(f"**üìÖ Date de demande :** {demande['Date_Demande']}")
                    st.write(f"**üë§ Demandeur :** {demande['Demandeur']}")
                    
                    # Affichage du statut avec ic√¥ne et couleur
                    if demande['Statut'] == 'En attente':
                        st.warning(f"**{statut_icon} Statut :** {demande['Statut']}")
                    elif demande['Statut'] == 'Approuv√©e':
                        st.success(f"**{statut_icon} Statut :** {demande['Statut']}")
                    elif demande['Statut'] == 'Refus√©e':
                        st.error(f"**{statut_icon} Statut :** {demande['Statut']}")
                    else:
                        st.info(f"**{statut_icon} Statut :** {demande['Statut']}")
                    
                    if demande['Date_Traitement']:
                        st.write(f"**‚è∞ Trait√© le :** {demande['Date_Traitement']}")
                        st.write(f"**üë®‚Äçüíº Trait√© par :** {demande['Traite_Par']}")
                
                with col2:
                    st.write(f"**üìù Motif :** {demande['Motif']}")
                    if demande['Commentaires']:
                        st.write(f"**üí¨ Commentaires :** {demande['Commentaires']}")
                
                # D√©tail des produits demand√©s
                st.write("**üõ†Ô∏è Produits demand√©s :**")
                try:
                    import ast
                    produits_data = ast.literal_eval(demande['Produits_Demandes'])
                    
                    # Affichage des informations additionnelles si disponibles
                    if isinstance(produits_data, dict):
                        if 'chantier' in produits_data:
                            st.write(f"**üèóÔ∏è Chantier :** {produits_data['chantier']}")
                        if 'urgence' in produits_data:
                            st.write(f"**‚ö° Urgence :** {produits_data['urgence']}")
                        if 'date_souhaitee' in produits_data:
                            st.write(f"**üìÖ Date souhait√©e :** {produits_data['date_souhaitee']}")
                        
                        # Affichage des produits
                        if 'produits' in produits_data:
                            produits_list = []
                            for ref, item in produits_data['produits'].items():
                                produits_list.append({
                                    'R√©f√©rence': ref,
                                    'Produit': item['produit'],
                                    'Quantit√©': item['quantite'],
                                    'Emplacement': item['emplacement']
                                })
                            
                            df_produits = pd.DataFrame(produits_list)
                            st.dataframe(df_produits)
                            
                            # V√©rification de la disponibilit√©
                            st.write("**üì¶ V√©rification de disponibilit√© :**")
                            for ref, item in produits_data['produits'].items():
                                produit_stock = df[df['Reference'] == ref]
                                if not produit_stock.empty:
                                    stock_actuel = int(produit_stock.iloc[0]['Quantite'])
                                    stock_min = int(produit_stock.iloc[0]['Stock_Min'])
                                    stock_max = int(produit_stock.iloc[0]['Stock_Max'])
                                    quantite_demandee = item['quantite']
                                    
                                    # Calcul de l'√©tat du stock actuel
                                    if stock_actuel < stock_min:
                                        statut_actuel = "üî¥ Stock critique"
                                        couleur_statut = "error"
                                    elif stock_actuel > stock_max:
                                        statut_actuel = "üü° Surstock"
                                        couleur_statut = "warning"
                                    elif stock_actuel <= stock_min + (stock_max - stock_min) * 0.3:
                                        statut_actuel = "üü† Stock faible"
                                        couleur_statut = "warning"
                                    else:
                                        statut_actuel = "üü¢ Stock normal"
                                        couleur_statut = "success"
                                    
                                    # Calcul de l'√©tat apr√®s la demande
                                    stock_apres_demande = stock_actuel - quantite_demandee
                                    if stock_apres_demande < 0:
                                        statut_apres = "‚ùå Stock insuffisant"
                                        couleur_apres = "error"
                                    elif stock_apres_demande < stock_min:
                                        statut_apres = "üü† Deviendra critique"
                                        couleur_apres = "error"
                                    elif stock_apres_demande <= stock_min + (stock_max - stock_min) * 0.3:
                                        statut_apres = "üü† Deviendra faible"
                                        couleur_apres = "warning"
                                    else:
                                        statut_apres = "üü¢ Restera normal"
                                        couleur_apres = "success"
                                    
                                    # Affichage avec informations d√©taill√©es
                                    with st.container():
                                        st.write(f"**{item['produit']}** (R√©f: {ref})")
                                        
                                        col1, col2 = st.columns(2)
                                        with col1:
                                            if couleur_statut == "error":
                                                st.error(f"√âtat actuel : {statut_actuel} ({stock_actuel}/{stock_min}-{stock_max})")
                                            elif couleur_statut == "warning":
                                                st.warning(f"√âtat actuel : {statut_actuel} ({stock_actuel}/{stock_min}-{stock_max})")
                                            else:
                                                st.success(f"√âtat actuel : {statut_actuel} ({stock_actuel}/{stock_min}-{stock_max})")
                                        
                                        with col2:
                                            if stock_actuel >= quantite_demandee:
                                                if couleur_apres == "error":
                                                    st.error(f"Apr√®s demande : {statut_apres} ({stock_apres_demande})")
                                                elif couleur_apres == "warning":
                                                    st.warning(f"Apr√®s demande : {statut_apres} ({stock_apres_demande})")
                                                else:
                                                    st.success(f"Apr√®s demande : {statut_apres} ({stock_apres_demande})")
                                            else:
                                                st.error(f"‚ùå IMPOSSIBLE : {quantite_demandee} demand√©s mais seulement {stock_actuel} disponible(s)")
                                        
                                        # Recommandations pour le magasinier
                                        if stock_actuel < quantite_demandee:
                                            st.info(f"üí° **Recommandation :** Refuser la demande ou proposer {stock_actuel} unit√©(s) maximum")
                                        elif stock_apres_demande < stock_min:
                                            st.info(f"üí° **Attention :** Approbation possible mais le stock deviendra critique. Pr√©voir un r√©approvisionnement urgent.")
                                        elif stock_actuel < stock_min:
                                            st.info(f"üí° **Attention :** Stock d√©j√† critique. Approbation d√©conseill√©e sans r√©approvisionnement.")
                                        
                                        st.divider()
                                else:
                                    st.error(f"‚ö†Ô∏è {item['produit']} : Produit non trouv√© dans le stock")
                
                except Exception as e:
                    st.write(demande['Produits_Demandes'])
                
                # Actions pour traiter la demande
                if demande['Statut'] == 'En attente':
                    st.write("**‚öôÔ∏è Actions :**")
                    
                    # Boutons d'action c√¥te √† c√¥te
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        if st.button("‚úÖ Approuver", key=f"btn_approve_{demande['ID_Demande']}", use_container_width=True):
                            st.session_state[f"action_{demande['ID_Demande']}"] = "approve"
                    
                    with col2:
                        if st.button("‚ùå Refuser", key=f"btn_refuse_{demande['ID_Demande']}", use_container_width=True):
                            st.session_state[f"action_{demande['ID_Demande']}"] = "refuse"
                    
                    with col3:
                        if st.button("‚è∏Ô∏è Mettre en attente", key=f"btn_hold_{demande['ID_Demande']}", use_container_width=True):
                            st.session_state[f"action_{demande['ID_Demande']}"] = "hold"
                    
                    # Affichage conditionnel des formulaires selon l'action s√©lectionn√©e
                    action_key = f"action_{demande['ID_Demande']}"
                    
                    if action_key in st.session_state:
                        st.write("---")
                        
                        if st.session_state[action_key] == "approve":
                            # Formulaire d'approbation
                            with st.form(key=f"form_approve_{demande['ID_Demande']}"):
                                st.write("**‚úÖ Approuver la demande**")
                                magasinier_approve = st.text_input("Votre nom (magasinier)", key=f"mag_approve_{demande['ID_Demande']}")
                                
                                col_submit, col_cancel = st.columns([1, 1])
                                with col_submit:
                                    approve_submitted = st.form_submit_button("‚úÖ Confirmer l'approbation", use_container_width=True)
                                with col_cancel:
                                    if st.form_submit_button("‚ùå Annuler", use_container_width=True):
                                        del st.session_state[action_key]
                                        st.experimental_rerun()
                                
                                if approve_submitted and magasinier_approve:
                                    # Mettre √† jour les stocks
                                    try:
                                        import ast
                                        produits_data = ast.literal_eval(demande['Produits_Demandes'])
                                        if 'produits' in produits_data:
                                            for ref, item in produits_data['produits'].items():
                                                produit_stock = df[df['Reference'] == ref]
                                                if not produit_stock.empty:
                                                    stock_actuel = int(produit_stock.iloc[0]['Quantite'])
                                                    quantite_demandee = item['quantite']
                                                    
                                                    if stock_actuel >= quantite_demandee:
                                                        nouvelle_quantite = stock_actuel - quantite_demandee
                                                        df.loc[df['Reference'] == ref, 'Quantite'] = nouvelle_quantite
                                                        
                                                        # Log du mouvement
                                                        log_mouvement(
                                                            item['produit'],
                                                            f"Sortie - Demande {demande['ID_Demande']}",
                                                            quantite_demandee,
                                                            nouvelle_quantite,
                                                            stock_actuel
                                                        )
                                        
                                        # Sauvegarder les stocks mis √† jour
                                        save_data(df)
                                        
                                        # Mettre √† jour le statut de la demande
                                        mettre_a_jour_demande(demande['ID_Demande'], 'Approuv√©e', magasinier_approve, "Demande approuv√©e et stock mis √† jour")
                                        
                                        # Nettoyer la session
                                        del st.session_state[action_key]
                                        
                                        st.success("‚úÖ Demande approuv√©e et stock mis √† jour")
                                        st.experimental_rerun()
                                        
                                    except Exception as e:
                                        st.error(f"Erreur lors du traitement : {str(e)}")
                                elif approve_submitted and not magasinier_approve:
                                    st.error("Veuillez saisir votre nom")
                        
                        elif st.session_state[action_key] == "refuse":
                            # Formulaire de refus
                            with st.form(key=f"form_refuse_{demande['ID_Demande']}"):
                                st.write("**‚ùå Refuser la demande**")
                                magasinier_refuse = st.text_input("Votre nom (magasinier)", key=f"mag_refuse_{demande['ID_Demande']}")
                                motif_refus = st.text_area("Motif du refus", key=f"motif_{demande['ID_Demande']}", placeholder="Expliquez pourquoi cette demande est refus√©e...")
                                
                                col_submit, col_cancel = st.columns([1, 1])
                                with col_submit:
                                    refuse_submitted = st.form_submit_button("‚ùå Confirmer le refus", use_container_width=True)
                                with col_cancel:
                                    if st.form_submit_button("‚ùå Annuler", use_container_width=True):
                                        del st.session_state[action_key]
                                        st.experimental_rerun()
                                
                                if refuse_submitted and magasinier_refuse and motif_refus:
                                    mettre_a_jour_demande(demande['ID_Demande'], 'Refus√©e', magasinier_refuse, motif_refus)
                                    
                                    # Nettoyer la session
                                    del st.session_state[action_key]
                                    
                                    st.success("‚ùå Demande refus√©e")
                                    st.experimental_rerun()
                                elif refuse_submitted:
                                    if not magasinier_refuse:
                                        st.error("Veuillez saisir votre nom")
                                    if not motif_refus:
                                        st.error("Veuillez indiquer le motif du refus")
                        
                        elif st.session_state[action_key] == "hold":
                            # Formulaire de mise en attente
                            with st.form(key=f"form_hold_{demande['ID_Demande']}"):
                                st.write("**‚è∏Ô∏è Mettre en attente**")
                                magasinier_hold = st.text_input("Votre nom (magasinier)", key=f"mag_hold_{demande['ID_Demande']}")
                                commentaire = st.text_area("Commentaire (optionnel)", key=f"comment_{demande['ID_Demande']}", placeholder="Ajoutez un commentaire sur cette mise en attente...")
                                
                                col_submit, col_cancel = st.columns([1, 1])
                                with col_submit:
                                    hold_submitted = st.form_submit_button("‚è∏Ô∏è Confirmer la mise en attente", use_container_width=True)
                                with col_cancel:
                                    if st.form_submit_button("‚ùå Annuler", use_container_width=True):
                                        del st.session_state[action_key]
                                        st.experimental_rerun()
                                
                                if hold_submitted and magasinier_hold:
                                    mettre_a_jour_demande(demande['ID_Demande'], 'En attente', magasinier_hold, commentaire)
                                    
                                    # Nettoyer la session
                                    del st.session_state[action_key]
                                    
                                    st.success("‚è∏Ô∏è Demande mise √† jour")
                                    st.experimental_rerun()
                                elif hold_submitted and not magasinier_hold:
                                    st.error("Veuillez saisir votre nom")
    
    else:
        st.info("Aucune demande de mat√©riel pour le moment.")

elif action == "Ajouter un produit":
    st.header("Ajouter un nouveau produit")
    
    with st.form("ajout_produit"):
        produit = st.text_input("Nom du produit")
        reference = st.text_input("R√©f√©rence (code-barres)")
        quantite = st.number_input("Quantit√©", min_value=0)
        
        col1, col2 = st.columns(2)
        with col1:
            stock_min = st.number_input("Stock minimum", min_value=0, value=10)
        with col2:
            stock_max = st.number_input("Stock maximum", min_value=1, value=100)
        
        emplacement = st.selectbox("Emplacement", ["Atelier A", "Atelier B", "Stockage"])
        fournisseur = st.selectbox("Fournisseur", ["Fournisseur A", "Fournisseur B", "Fournisseur C"])
        prix = st.number_input("Prix unitaire", min_value=0.0)
        
        submitted = st.form_submit_button("Ajouter")
        
        if submitted:
            if stock_min >= stock_max:
                st.error("Le stock minimum doit √™tre inf√©rieur au stock maximum")
            else:
                new_row = pd.DataFrame({
                    'Produits': [produit],
                    'Reference': [reference],
                    'Quantite': [quantite],
                    'Stock_Min': [stock_min],
                    'Stock_Max': [stock_max],
                    'Emplacement': [emplacement],
                    'Fournisseur': [fournisseur],
                    'Date_Entree': [datetime.now().strftime("%Y-%m-%d")],
                    'Prix_Unitaire': [prix]
                })
                df = pd.concat([df, new_row], ignore_index=True)
                save_data(df)
                st.success("Produit ajout√© avec succ√®s!")
                st.experimental_rerun()

elif action == "Modifier un produit":
    st.header("Modifier un produit")
    
    if not df.empty:
        produit_to_edit = st.selectbox("S√©lectionner le produit √† modifier", df['Produits'].unique())
        produit_data = df[df['Produits'] == produit_to_edit].iloc[0]
        
        with st.form("modifier_produit"):
            quantite = st.number_input("Nouvelle quantit√©", value=int(produit_data['Quantite']))
            
            col1, col2 = st.columns(2)
            with col1:
                stock_min = st.number_input("Stock minimum", min_value=0, value=int(produit_data['Stock_Min']))
            with col2:
                stock_max = st.number_input("Stock maximum", min_value=1, value=int(produit_data['Stock_Max']))
            
            emplacement = st.selectbox("Nouvel emplacement", df['Emplacement'].unique(), 
                                     index=list(df['Emplacement'].unique()).index(produit_data['Emplacement']))
            
            submitted = st.form_submit_button("Mettre √† jour")
            
            if submitted:
                if stock_min >= stock_max:
                    st.error("Le stock minimum doit √™tre inf√©rieur au stock maximum")
                else:
                    df.loc[df['Produits'] == produit_to_edit, 'Quantite'] = quantite
                    df.loc[df['Produits'] == produit_to_edit, 'Stock_Min'] = stock_min
                    df.loc[df['Produits'] == produit_to_edit, 'Stock_Max'] = stock_max
                    df.loc[df['Produits'] == produit_to_edit, 'Emplacement'] = emplacement
                    save_data(df)
                    st.success("Produit mis √† jour avec succ√®s!")
                    st.experimental_rerun()

elif action == "Rechercher un produit":
    st.header("Rechercher un produit")
    
    produit_trouve = rechercher_produit(df, mode="affichage")

elif action == "Entr√©e de stock":
    st.header("Entr√©e de stock")
    if not df.empty:
        produit_trouve = rechercher_produit(df)
        
        # Affichage du formulaire d'entr√©e si un produit est trouv√©
        if produit_trouve is not None:
            st.divider()
            st.subheader(f"Entr√©e de stock - {produit_trouve['Produits']}")
            st.write(f"**R√©f√©rence :** {produit_trouve['Reference']}")
            st.write(f"**Emplacement :** {produit_trouve['Emplacement']}")
            quantite_actuelle = int(produit_trouve['Quantite'])
            stock_min = int(produit_trouve['Stock_Min'])
            stock_max = int(produit_trouve['Stock_Max'])
            
            # Affichage du statut de stock avec couleurs
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("Quantit√© actuelle", quantite_actuelle)
            with col2:
                st.metric("Stock minimum", stock_min)
            with col3:
                st.metric("Stock maximum", stock_max)
            
            # Indicateur de statut
            if quantite_actuelle < stock_min:
                st.error(f"‚ö†Ô∏è Stock critique ! Il manque {stock_min - quantite_actuelle} unit√©s pour atteindre le minimum.")
                quantite_recommandee = stock_max - quantite_actuelle
                st.info(f"üí° Recommandation : ajouter {quantite_recommandee} unit√©s pour atteindre le stock maximum.")
            elif quantite_actuelle > stock_max:
                st.warning(f"üü° Surstock ! {quantite_actuelle - stock_max} unit√©s au-dessus du maximum.")
            else:
                st.success("‚úÖ Stock dans les limites normales.")
            
            quantite_ajout = st.number_input("Quantit√© √† ajouter", min_value=1, step=1, key="ajout_entree")
            
            # Pr√©visualisation du nouveau stock
            nouveau_stock = quantite_actuelle + quantite_ajout
            if nouveau_stock > stock_max:
                st.warning(f"‚ö†Ô∏è Attention : apr√®s cette entr√©e, le stock sera de {nouveau_stock} (au-dessus du maximum de {stock_max})")
            
            if st.button("Valider l'entr√©e", type="primary"):
                nouvelle_quantite = quantite_actuelle + quantite_ajout
                df.loc[df['Reference'] == produit_trouve['Reference'], 'Quantite'] = nouvelle_quantite
                save_data(df)
                log_mouvement(produit_trouve['Produits'], "Entr√©e", quantite_ajout, nouvelle_quantite, quantite_actuelle)
                st.success(f"Entr√©e de {quantite_ajout} unit√©s pour {produit_trouve['Produits']} effectu√©e.")
                st.experimental_rerun()
    else:
        st.warning("Aucun produit disponible dans l'inventaire.")

elif action == "Sortie de stock":
    st.header("Sortie de stock")
    if not df.empty:
        produit_trouve = rechercher_produit(df)
        
        # Affichage du formulaire de sortie si un produit est trouv√©
        if produit_trouve is not None:
            st.divider()
            st.subheader(f"Sortie de stock - {produit_trouve['Produits']}")
            st.write(f"**R√©f√©rence :** {produit_trouve['Reference']}")
            st.write(f"**Emplacement :** {produit_trouve['Emplacement']}")
            quantite_actuelle = int(produit_trouve['Quantite'])
            stock_min = int(produit_trouve['Stock_Min'])
            stock_max = int(produit_trouve['Stock_Max'])
            
            # Affichage du statut de stock avec couleurs
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("Quantit√© actuelle", quantite_actuelle)
            with col2:
                st.metric("Stock minimum", stock_min)
            with col3:
                st.metric("Stock maximum", stock_max)
            
            # Indicateur de statut
            if quantite_actuelle < stock_min:
                st.error(f"‚ö†Ô∏è Stock critique ! Il manque {stock_min - quantite_actuelle} unit√©s pour atteindre le minimum.")
            elif quantite_actuelle > stock_max:
                st.warning(f"üü° Surstock ! {quantite_actuelle - stock_max} unit√©s au-dessus du maximum.")
            else:
                st.success("‚úÖ Stock dans les limites normales.")
            
            quantite_retrait = st.number_input("Quantit√© √† retirer", min_value=1, step=1, key="retrait_sortie")
            
            # Pr√©visualisation du nouveau stock
            nouveau_stock = quantite_actuelle - quantite_retrait
            if nouveau_stock < 0:
                st.error(f"‚ùå Impossible : stock insuffisant (quantit√© actuelle : {quantite_actuelle})")
            elif nouveau_stock < stock_min:
                st.warning(f"‚ö†Ô∏è Attention : apr√®s cette sortie, le stock sera de {nouveau_stock} (en dessous du minimum de {stock_min})")
            
            if st.button("Valider la sortie", type="primary"):
                if quantite_actuelle >= quantite_retrait:
                    nouvelle_quantite = quantite_actuelle - quantite_retrait
                    df.loc[df['Reference'] == produit_trouve['Reference'], 'Quantite'] = nouvelle_quantite
                    save_data(df)
                    log_mouvement(produit_trouve['Produits'], "Sortie", quantite_retrait, nouvelle_quantite, quantite_actuelle)
                    st.success(f"Sortie de {quantite_retrait} unit√©s pour {produit_trouve['Produits']} effectu√©e.")
                    st.experimental_rerun()
                else:
                    st.error("Stock insuffisant pour effectuer la sortie.")
    else:
        st.warning("Aucun produit disponible dans l'inventaire.")

elif action == "Inventaire":
    st.header("Ajustement d'inventaire")
    if not df.empty:
        produit_trouve = rechercher_produit(df)
        
        # Affichage du formulaire d'inventaire si un produit est trouv√©
        if produit_trouve is not None:
            st.divider()
            st.subheader(f"Ajustement d'inventaire - {produit_trouve['Produits']}")
            st.write(f"**R√©f√©rence :** {produit_trouve['Reference']}")
            st.write(f"**Emplacement :** {produit_trouve['Emplacement']}")
            quantite_actuelle = int(produit_trouve['Quantite'])
            stock_min = int(produit_trouve['Stock_Min'])
            stock_max = int(produit_trouve['Stock_Max'])
            
            # Affichage du statut de stock avec couleurs
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("Quantit√© actuelle", quantite_actuelle)
            with col2:
                st.metric("Stock minimum", stock_min)
            with col3:
                st.metric("Stock maximum", stock_max)
            
            # Indicateur de statut
            if quantite_actuelle < stock_min:
                st.error(f"‚ö†Ô∏è Stock critique ! Il manque {stock_min - quantite_actuelle} unit√©s pour atteindre le minimum.")
                st.info(f"üí° Recommandation : ajuster √† {stock_max} unit√©s pour un stock optimal.")
            elif quantite_actuelle > stock_max:
                st.warning(f"üü° Surstock ! {quantite_actuelle - stock_max} unit√©s au-dessus du maximum.")
            else:
                st.success("‚úÖ Stock dans les limites normales.")
            
            nouvelle_quantite = st.number_input("Nouvelle quantit√© (apr√®s inventaire)", min_value=0, value=quantite_actuelle, step=1, key="nv_inventaire")
            
            # Pr√©visualisation du statut apr√®s ajustement
            if nouvelle_quantite != quantite_actuelle:
                if nouvelle_quantite < stock_min:
                    st.warning(f"‚ö†Ô∏è Apr√®s ajustement : stock critique ({nouvelle_quantite} < {stock_min})")
                elif nouvelle_quantite > stock_max:
                    st.warning(f"‚ö†Ô∏è Apr√®s ajustement : surstock ({nouvelle_quantite} > {stock_max})")
                else:
                    st.success(f"‚úÖ Apr√®s ajustement : stock normal ({stock_min} ‚â§ {nouvelle_quantite} ‚â§ {stock_max})")
            
            if st.button("Valider l'ajustement", type="primary"):
                if nouvelle_quantite != quantite_actuelle:
                    df.loc[df['Reference'] == produit_trouve['Reference'], 'Quantite'] = nouvelle_quantite
                    save_data(df)
                    log_mouvement(
                        produit_trouve['Produits'],
                        "Inventaire",
                        abs(nouvelle_quantite - quantite_actuelle),
                        nouvelle_quantite,
                        quantite_actuelle
                    )
                    st.success(f"Inventaire ajust√© pour {produit_trouve['Produits']} : {quantite_actuelle} ‚Üí {nouvelle_quantite}")
                    st.experimental_rerun()
                else:
                    st.info("La quantit√© saisie est identique √† la quantit√© actuelle.")
    else:
        st.warning("Aucun produit disponible dans l'inventaire.")

elif action == "Alertes de stock":
    st.header("üö® Alertes de Stock")
    
    if not df.empty:
        # Produits en stock critique (en dessous du minimum)
        alertes_min = df[df['Quantite'] < df['Stock_Min']]
        
        # Produits en surstock (au-dessus du maximum)
        alertes_max = df[df['Quantite'] > df['Stock_Max']]
        
        # Produits bient√¥t en rupture (entre min et 50% de la plage min-max)
        seuil_alerte = df['Stock_Min'] + (df['Stock_Max'] - df['Stock_Min']) * 0.3
        alertes_bientot = df[(df['Quantite'] >= df['Stock_Min']) & (df['Quantite'] <= seuil_alerte)]
        
        # M√©triques en colonnes
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("üî¥ Stock critique", len(alertes_min))
        with col2:
            st.metric("üü† Bient√¥t en rupture", len(alertes_bientot))
        with col3:
            st.metric("üü° Surstock", len(alertes_max))
        
        # Affichage des alertes critiques
        if not alertes_min.empty:
            st.subheader("üî¥ Produits en stock critique")
            st.error("Ces produits n√©cessitent un r√©approvisionnement urgent !")
            
            alertes_min_display = alertes_min.copy()
            alertes_min_display['Manquant'] = alertes_min_display['Stock_Min'] - alertes_min_display['Quantite']
            alertes_min_display['Recommandation'] = alertes_min_display['Stock_Max'] - alertes_min_display['Quantite']
            
            colonnes_critique = ['Produits', 'Reference', 'Quantite', 'Stock_Min', 'Manquant', 'Recommandation', 'Fournisseur']
            st.dataframe(alertes_min_display[colonnes_critique])
        
        # Affichage des alertes de bient√¥t en rupture
        if not alertes_bientot.empty:
            st.subheader("üü† Produits bient√¥t en rupture")
            st.warning("Ces produits devraient √™tre command√©s prochainement")
            
            alertes_bientot_display = alertes_bientot.copy()
            alertes_bientot_display['Seuil_Alerte'] = seuil_alerte[alertes_bientot.index].round(1)
            
            colonnes_bientot = ['Produits', 'Reference', 'Quantite', 'Stock_Min', 'Seuil_Alerte', 'Stock_Max', 'Fournisseur']
            st.dataframe(alertes_bientot_display[colonnes_bientot])
        
        # Affichage des surstocks
        if not alertes_max.empty:
            st.subheader("üü° Produits en surstock")
            st.info("Ces produits ont un stock excessif")
            
            alertes_max_display = alertes_max.copy()
            alertes_max_display['Exc√©dent'] = alertes_max_display['Quantite'] - alertes_max_display['Stock_Max']
            
            colonnes_surstock = ['Produits', 'Reference', 'Quantite', 'Stock_Max', 'Exc√©dent', 'Emplacement']
            st.dataframe(alertes_max_display[colonnes_surstock])
        
        # Si tout va bien
        if alertes_min.empty and alertes_bientot.empty and alertes_max.empty:
            st.success("üéâ Aucune alerte ! Tous les stocks sont dans les limites normales.")
            
    else:
        st.warning("Aucun produit disponible dans l'inventaire.")

elif action == "Historique des mouvements":
    st.header("Historique des mouvements de stock")
    import pandas as pd
    import os
    file_path = "data/historique.xlsx"
    if os.path.exists(file_path):
        df_hist = pd.read_excel(file_path, engine='openpyxl')
        if not df_hist.empty:
            df_hist = df_hist.sort_values(by="Date", ascending=False)
            # Filtres
            col1, col2, col3 = st.columns(3)
            with col1:
                types = ["Tous"] + sorted(df_hist['Nature'].dropna().unique().tolist())
                type_filtre = st.selectbox("Type de mouvement", types)
            with col2:
                produits = ["Tous"] + sorted(df_hist['Produit'].dropna().unique().tolist())
                produit_filtre = st.selectbox("Produit", produits)
            with col3:
                min_date = pd.to_datetime(df_hist['Date']).min().date()
                max_date = pd.to_datetime(df_hist['Date']).max().date()
                date_range = st.date_input("Plage de dates", (min_date, max_date))
            # Application des filtres
            df_filtre = df_hist.copy()
            if type_filtre != "Tous":
                df_filtre = df_filtre[df_filtre['Nature'] == type_filtre]
            if produit_filtre != "Tous":
                df_filtre = df_filtre[df_filtre['Produit'] == produit_filtre]
            if date_range:
                df_filtre = df_filtre[(pd.to_datetime(df_filtre['Date']).dt.date >= date_range[0]) & (pd.to_datetime(df_filtre['Date']).dt.date <= date_range[1])]
            st.dataframe(df_filtre)
        else:
            st.info("Aucun mouvement enregistr√© pour le moment.")
    else:
        st.info("Aucun mouvement enregistr√© pour le moment.")

elif action == "QR Code produit":
    st.header("QR Code d'un produit")
    if not df.empty:
        produit_select = st.selectbox("S√©lectionnez un produit", df['Produits'].unique(), key="qr")
        reference = df[df['Produits'] == produit_select]['Reference'].iloc[0]
        st.write(f"**R√©f√©rence (code-barres) :** {reference}")
        # G√©n√©ration du QR code
        qr = qrcode.QRCode(box_size=10, border=4)
        qr.add_data(reference)
        qr.make(fit=True)
        img = qr.make_image(fill_color="black", back_color="white")
        buf = BytesIO()
        img.save(buf, format="PNG")
        st.image(buf.getvalue(), caption=f"QR Code pour {produit_select}")
    else:
        st.warning("Aucun produit disponible dans l'inventaire.")