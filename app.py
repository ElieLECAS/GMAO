import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime
import os
import openpyxl
import qrcode
from io import BytesIO
from PIL import Image
import platform
import sys

# V√©rifier si nous sommes sur Streamlit Cloud
IS_STREAMLIT_CLOUD = os.environ.get('STREAMLIT_SERVER_HEADLESS', 'false').lower() == 'true'

# Importer les modules de cam√©ra seulement si nous ne sommes pas sur Streamlit Cloud
if not IS_STREAMLIT_CLOUD:
    try:
        import cv2
        from pyzbar.pyzbar import decode
        import numpy as np
        CAMERA_AVAILABLE = True
    except ImportError:
        CAMERA_AVAILABLE = False
else:
    CAMERA_AVAILABLE = False

# Configuration de la page
st.set_page_config(page_title="GMAO - Gestion de Stock", layout="wide")

# Titre de l'application
st.title("üì¶ Syst√®me de Gestion de Stock")

# Donn√©es initiales
INITIAL_DATA = {
    'Produits': ['Tournevis cruciforme', 'Marteau 500g', 'Perceuse sans fil', 'Vis 6x50mm', 'Cl√© √† molette'],
    'Reference': ['TS001', 'MH001', 'PS001', 'V001', 'CM001'],
    'Quantite': [50, 30, 15, 1000, 25],
    'Emplacement': ['Atelier A', 'Atelier B', 'Atelier A', 'Stockage', 'Atelier B'],
    'Fournisseur': ['Fournisseur A', 'Fournisseur B', 'Fournisseur C', 'Fournisseur A', 'Fournisseur B'],
    'Date_Entree': ['2024-03-15', '2024-03-14', '2024-03-13', '2024-03-12', '2024-03-11'],
    'Prix_Unitaire': [15.99, 25.50, 89.99, 0.15, 12.75]
}

# Chargement des donn√©es
def load_data():
    # Cr√©er le dossier data s'il n'existe pas
    os.makedirs("data", exist_ok=True)
    
    file_path = "data/inventaire.xlsx"
    
    # Si le fichier n'existe pas, cr√©er un nouveau fichier avec les donn√©es initiales
    if not os.path.exists(file_path):
        df = pd.DataFrame(INITIAL_DATA)
        df.to_excel(file_path, index=False, engine='openpyxl')
        return df
    
    try:
        return pd.read_excel(file_path, engine='openpyxl')
    except Exception as e:
        st.error(f"Erreur lors de la lecture du fichier Excel: {str(e)}")
        # En cas d'erreur, cr√©er un nouveau fichier avec les donn√©es initiales
        df = pd.DataFrame(INITIAL_DATA)
        df.to_excel(file_path, index=False, engine='openpyxl')
        return df

# Fonction pour sauvegarder les donn√©es
def save_data(df):
    try:
        df.to_excel("data/inventaire.xlsx", index=False, engine='openpyxl')
    except Exception as e:
        st.error(f"Erreur lors de la sauvegarde du fichier Excel: {str(e)}")

def log_mouvement(produit, nature, quantite_mouvement, quantite_apres, quantite_avant):
    os.makedirs("data", exist_ok=True)
    file_path = "data/historique.xlsx"
    new_row = {
        'Date': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        'Produit': produit,
        'Nature': nature,
        'Quantite_Mouvement': quantite_mouvement,
        'Quantite_Avant': quantite_avant,
        'Quantite_Apres': quantite_apres
    }
    if os.path.exists(file_path):
        df_hist = pd.read_excel(file_path, engine='openpyxl')
        df_hist = pd.concat([df_hist, pd.DataFrame([new_row])], ignore_index=True)
    else:
        df_hist = pd.DataFrame([new_row])
    df_hist.to_excel(file_path, index=False, engine='openpyxl')

# Chargement initial des donn√©es
df = load_data()

# Sidebar pour les actions
st.sidebar.title("Actions")
action = st.sidebar.selectbox(
    "Choisir une action",
    [
        "Voir l'inventaire",
        "Ajouter un produit",
        "Modifier un produit",
        "Rechercher un produit",
        "Entr√©e de stock",
        "Sortie de stock",
        "Inventaire",
        "Historique des mouvements",
        "QR Code produit"
    ]
)

# Fonction pour scanner le QR code
def scan_qr_code():
    if not CAMERA_AVAILABLE:
        st.warning("La cam√©ra n'est pas disponible dans cet environnement.")
        return None
        
    cap = cv2.VideoCapture(0)
    if not cap.isOpened():
        st.error("Impossible d'acc√©der √† la cam√©ra")
        return None
    
    stframe = st.empty()
    stop_button = st.button("Arr√™ter le scan")
    
    while not stop_button:
        ret, frame = cap.read()
        if not ret:
            st.error("Erreur lors de la lecture de la cam√©ra")
            break
            
        # D√©tection des QR codes
        decoded_objects = decode(frame)
        for obj in decoded_objects:
            # Dessiner un rectangle autour du QR code
            points = obj.polygon
            if len(points) > 4:
                hull = cv2.convexHull(np.array([point for point in points], dtype=np.float32))
                cv2.polylines(frame, [hull], True, (0, 255, 0), 2)
            else:
                cv2.polylines(frame, [np.array(points, dtype=np.int32)], True, (0, 255, 0), 2)
            
            # Afficher le code
            code = obj.data.decode('utf-8')
            cv2.putText(frame, code, (points[0][0], points[0][1] - 10),
                       cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
            
            # Convertir l'image pour Streamlit
            frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            stframe.image(frame_rgb)
            
            # Lib√©rer la cam√©ra et retourner le code
            cap.release()
            return code
        
        # Convertir l'image pour Streamlit
        frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        stframe.image(frame_rgb)
    
    cap.release()
    return None

if action == "Voir l'inventaire":
    st.header("Inventaire actuel")
    if not df.empty:
        st.dataframe(df)
        
        # Graphique de la r√©partition des stocks
        fig = px.bar(df, x='Produits', y='Quantite', title='R√©partition des stocks par produit')
        st.plotly_chart(fig)
    else:
        st.warning("Aucune donn√©e disponible dans l'inventaire.")

elif action == "Ajouter un produit":
    st.header("Ajouter un nouveau produit")
    
    with st.form("ajout_produit"):
        produit = st.text_input("Nom du produit")
        reference = st.text_input("R√©f√©rence (code-barres)")
        quantite = st.number_input("Quantit√©", min_value=0)
        emplacement = st.selectbox("Emplacement", ["Atelier A", "Atelier B", "Stockage"])
        fournisseur = st.selectbox("Fournisseur", ["Fournisseur A", "Fournisseur B", "Fournisseur C"])
        prix = st.number_input("Prix unitaire", min_value=0.0)
        
        submitted = st.form_submit_button("Ajouter")
        
        if submitted:
            new_row = pd.DataFrame({
                'Produits': [produit],
                'Reference': [reference],
                'Quantite': [quantite],
                'Emplacement': [emplacement],
                'Fournisseur': [fournisseur],
                'Date_Entree': [datetime.now().strftime("%Y-%m-%d")],
                'Prix_Unitaire': [prix]
            })
            df = pd.concat([df, new_row], ignore_index=True)
            save_data(df)
            st.success("Produit ajout√© avec succ√®s!")

elif action == "Modifier un produit":
    st.header("Modifier un produit")
    
    if not df.empty:
        produit_to_edit = st.selectbox("S√©lectionner le produit √† modifier", df['Produits'].unique())
        produit_data = df[df['Produits'] == produit_to_edit].iloc[0]
        
        with st.form("modifier_produit"):
            quantite = st.number_input("Nouvelle quantit√©", value=int(produit_data['Quantite']))
            emplacement = st.selectbox("Nouvel emplacement", df['Emplacement'].unique(), 
                                     index=list(df['Emplacement'].unique()).index(produit_data['Emplacement']))
            
            submitted = st.form_submit_button("Mettre √† jour")
            
            if submitted:
                df.loc[df['Produits'] == produit_to_edit, 'Quantite'] = quantite
                df.loc[df['Produits'] == produit_to_edit, 'Emplacement'] = emplacement
                save_data(df)
                st.success("Produit mis √† jour avec succ√®s!")

elif action == "Rechercher un produit":
    st.header("Rechercher un produit")
    
    if CAMERA_AVAILABLE:
        search_type = st.radio("Type de recherche", ["Par r√©f√©rence", "Par nom", "Scanner QR Code"])
    else:
        search_type = st.radio("Type de recherche", ["Par r√©f√©rence", "Par nom"])
    
    if search_type == "Scanner QR Code" and CAMERA_AVAILABLE:
        st.write("Pr√©sentez le QR code devant la cam√©ra")
        if st.button("D√©marrer le scan"):
            code = scan_qr_code()
            if code:
                result = df[df['Reference'] == code]
                if not result.empty:
                    st.success(f"Produit trouv√© : {result['Produits'].iloc[0]}")
                    st.dataframe(result)
                else:
                    st.warning("Aucun produit trouv√© avec cette r√©f√©rence.")
    elif search_type == "Par r√©f√©rence":
        reference = st.text_input("Entrez la r√©f√©rence du produit")
        if reference:
            result = df[df['Reference'] == reference]
            if not result.empty:
                st.dataframe(result)
            else:
                st.warning("Aucun produit trouv√© avec cette r√©f√©rence.")
    else:
        nom = st.text_input("Entrez le nom du produit")
        if nom:
            result = df[df['Produits'].str.contains(nom, case=False)]
            if not result.empty:
                st.dataframe(result)
            else:
                st.warning("Aucun produit trouv√© avec ce nom.")

elif action == "Entr√©e de stock":
    st.header("Entr√©e de stock")
    if not df.empty:
        if CAMERA_AVAILABLE:
            search_type = st.radio("M√©thode de s√©lection", ["Liste d√©roulante", "Scanner QR Code"])
        else:
            search_type = "Liste d√©roulante"
        
        if search_type == "Scanner QR Code" and CAMERA_AVAILABLE:
            st.write("Pr√©sentez le QR code devant la cam√©ra")
            if st.button("D√©marrer le scan"):
                code = scan_qr_code()
                if code:
                    produit_select = df[df['Reference'] == code]['Produits'].iloc[0]
                    st.session_state['produit_entree'] = produit_select
                    st.experimental_rerun()
        
        produit_select = st.selectbox("S√©lectionnez un produit", df['Produits'].unique(), 
                                    key="entree", 
                                    index=df['Produits'].tolist().index(st.session_state.get('produit_entree', df['Produits'].iloc[0])) if st.session_state.get('produit_entree') in df['Produits'].tolist() else 0)
        quantite_actuelle = int(df[df['Produits'] == produit_select]['Quantite'].iloc[0])
        st.write(f"Quantit√© actuelle : **{quantite_actuelle}**")
        quantite_ajout = st.number_input("Quantit√© √† ajouter", min_value=1, step=1, key="ajout")
        if st.button("Valider l'entr√©e"):
            nouvelle_quantite = quantite_actuelle + quantite_ajout
            df.loc[df['Produits'] == produit_select, 'Quantite'] = nouvelle_quantite
            save_data(df)
            log_mouvement(produit_select, "Entr√©e", quantite_ajout, nouvelle_quantite, quantite_actuelle)
            st.success(f"Entr√©e de {quantite_ajout} unit√©s pour {produit_select} effectu√©e.")
            st.experimental_rerun()
    else:
        st.warning("Aucun produit disponible dans l'inventaire.")

elif action == "Sortie de stock":
    st.header("Sortie de stock")
    if not df.empty:
        if CAMERA_AVAILABLE:
            search_type = st.radio("M√©thode de s√©lection", ["Liste d√©roulante", "Scanner QR Code"])
        else:
            search_type = "Liste d√©roulante"
        
        if search_type == "Scanner QR Code" and CAMERA_AVAILABLE:
            st.write("Pr√©sentez le QR code devant la cam√©ra")
            if st.button("D√©marrer le scan"):
                code = scan_qr_code()
                if code:
                    produit_select = df[df['Reference'] == code]['Produits'].iloc[0]
                    st.session_state['produit_sortie'] = produit_select
                    st.experimental_rerun()
        
        produit_select = st.selectbox("S√©lectionnez un produit", df['Produits'].unique(), 
                                    key="sortie",
                                    index=df['Produits'].tolist().index(st.session_state.get('produit_sortie', df['Produits'].iloc[0])) if st.session_state.get('produit_sortie') in df['Produits'].tolist() else 0)
        quantite_actuelle = int(df[df['Produits'] == produit_select]['Quantite'].iloc[0])
        st.write(f"Quantit√© actuelle : **{quantite_actuelle}**")
        quantite_retrait = st.number_input("Quantit√© √† retirer", min_value=1, step=1, key="retrait")
        if st.button("Valider la sortie"):
            if quantite_actuelle >= quantite_retrait:
                nouvelle_quantite = quantite_actuelle - quantite_retrait
                df.loc[df['Produits'] == produit_select, 'Quantite'] = nouvelle_quantite
                save_data(df)
                log_mouvement(produit_select, "Sortie", quantite_retrait, nouvelle_quantite, quantite_actuelle)
                st.success(f"Sortie de {quantite_retrait} unit√©s pour {produit_select} effectu√©e.")
                st.experimental_rerun()
            else:
                st.error("Stock insuffisant pour effectuer la sortie.")
    else:
        st.warning("Aucun produit disponible dans l'inventaire.")

elif action == "Inventaire":
    st.header("Ajustement d'inventaire")
    if not df.empty:
        if CAMERA_AVAILABLE:
            search_type = st.radio("M√©thode de s√©lection", ["Liste d√©roulante", "Scanner QR Code"])
        else:
            search_type = "Liste d√©roulante"
        
        if search_type == "Scanner QR Code" and CAMERA_AVAILABLE:
            st.write("Pr√©sentez le QR code devant la cam√©ra")
            if st.button("D√©marrer le scan"):
                code = scan_qr_code()
                if code:
                    produit_select = df[df['Reference'] == code]['Produits'].iloc[0]
                    st.session_state['produit_inventaire'] = produit_select
                    st.experimental_rerun()
        
        produit_select = st.selectbox("S√©lectionnez un produit", df['Produits'].unique(), 
                                    key="inventaire",
                                    index=df['Produits'].tolist().index(st.session_state.get('produit_inventaire', df['Produits'].iloc[0])) if st.session_state.get('produit_inventaire') in df['Produits'].tolist() else 0)
        quantite_actuelle = int(df[df['Produits'] == produit_select]['Quantite'].iloc[0])
        st.write(f"Quantit√© actuelle : **{quantite_actuelle}**")
        nouvelle_quantite = st.number_input("Nouvelle quantit√© (apr√®s inventaire)", min_value=0, value=quantite_actuelle, step=1, key="nv_inventaire")
        if st.button("Valider l'ajustement"):
            if nouvelle_quantite != quantite_actuelle:
                df.loc[df['Produits'] == produit_select, 'Quantite'] = nouvelle_quantite
                save_data(df)
                log_mouvement(
                    produit_select,
                    "Inventaire",
                    abs(nouvelle_quantite - quantite_actuelle),
                    nouvelle_quantite,
                    quantite_actuelle
                )
                st.success(f"Inventaire ajust√© pour {produit_select} : {quantite_actuelle} ‚Üí {nouvelle_quantite}")
                st.experimental_rerun()
            else:
                st.info("La quantit√© saisie est identique √† la quantit√© actuelle.")
    else:
        st.warning("Aucun produit disponible dans l'inventaire.")

elif action == "Historique des mouvements":
    st.header("Historique des mouvements de stock")
    import pandas as pd
    import os
    file_path = "data/historique.xlsx"
    if os.path.exists(file_path):
        df_hist = pd.read_excel(file_path, engine='openpyxl')
        if not df_hist.empty:
            df_hist = df_hist.sort_values(by="Date", ascending=False)
            # Filtres
            col1, col2, col3 = st.columns(3)
            with col1:
                types = ["Tous"] + sorted(df_hist['Nature'].dropna().unique().tolist())
                type_filtre = st.selectbox("Type de mouvement", types)
            with col2:
                produits = ["Tous"] + sorted(df_hist['Produit'].dropna().unique().tolist())
                produit_filtre = st.selectbox("Produit", produits)
            with col3:
                min_date = pd.to_datetime(df_hist['Date']).min().date()
                max_date = pd.to_datetime(df_hist['Date']).max().date()
                date_range = st.date_input("Plage de dates", (min_date, max_date))
            # Application des filtres
            df_filtre = df_hist.copy()
            if type_filtre != "Tous":
                df_filtre = df_filtre[df_filtre['Nature'] == type_filtre]
            if produit_filtre != "Tous":
                df_filtre = df_filtre[df_filtre['Produit'] == produit_filtre]
            if date_range:
                df_filtre = df_filtre[(pd.to_datetime(df_filtre['Date']).dt.date >= date_range[0]) & (pd.to_datetime(df_filtre['Date']).dt.date <= date_range[1])]
            st.dataframe(df_filtre)
        else:
            st.info("Aucun mouvement enregistr√© pour le moment.")
    else:
        st.info("Aucun mouvement enregistr√© pour le moment.")

elif action == "QR Code produit":
    st.header("QR Code d'un produit")
    if not df.empty:
        produit_select = st.selectbox("S√©lectionnez un produit", df['Produits'].unique(), key="qr")
        reference = df[df['Produits'] == produit_select]['Reference'].iloc[0]
        st.write(f"**R√©f√©rence (code-barres) :** {reference}")
        # G√©n√©ration du QR code
        qr = qrcode.QRCode(box_size=10, border=4)
        qr.add_data(reference)
        qr.make(fit=True)
        img = qr.make_image(fill_color="black", back_color="white")
        buf = BytesIO()
        img.save(buf, format="PNG")
        st.image(buf.getvalue(), caption=f"QR Code pour {produit_select}")
    else:
        st.warning("Aucun produit disponible dans l'inventaire.")